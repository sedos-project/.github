{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SEDOS Documentation \u00b6 Welcome to the documentation of the SEDOS project! The documentation gives an overview of the tools in SEDOS, as well as important conventions for their usage. In the project, we aim to establish a streamlined data management process with as much automation as practical. The documentation is structured in two main parts SEDOS-specific data requirements Instructions on how to contribute data","title":"SEDOS Documentation"},{"location":"#sedos#documentation","text":"Welcome to the documentation of the SEDOS project! The documentation gives an overview of the tools in SEDOS, as well as important conventions for their usage. In the project, we aim to establish a streamlined data management process with as much automation as practical. The documentation is structured in two main parts SEDOS-specific data requirements Instructions on how to contribute data","title":"SEDOS Documentation"},{"location":"glossary/","text":"Glossary \u00b6 Quick reference for tools. Symbol Tool Abbreviation Documentation OpenEnergyPlatform OEP OEMetadata OEM docs OEdatamodel OED docs OEdatamodel-API docs \ud83c\udf3e OpenAnnotationTool OAT oemetadata builder \ud83c\udf20 databus \ud83d\udcd9 Prot\u00e9g\u00e9 docs","title":"Glossary"},{"location":"glossary/#glossary","text":"Quick reference for tools. Symbol Tool Abbreviation Documentation OpenEnergyPlatform OEP OEMetadata OEM docs OEdatamodel OED docs OEdatamodel-API docs \ud83c\udf3e OpenAnnotationTool OAT oemetadata builder \ud83c\udf20 databus \ud83d\udcd9 Prot\u00e9g\u00e9 docs","title":"Glossary"},{"location":"how_to_contribute_data/","text":"How to contribute data? \u00b6 The following instructions will guide you through the process of contributing data in the SEDOS project. Hyperlinks direct you to more detailed information regarding the subject. 1. Create input data tables \u00b6 Collect and preprocess data into the tabular oedatamodel-parameter ( scalar or timeseries ) thereby following the input data conventions Store data sources in BIB-file and fill Bibtex-keys in \"source\"-column of the data table. Note timeseries data and scalar data are stored in two different tables 2. Create metadata \u00b6 Create the metadata according to the OEMetadata v.1.5.1 for each data table Use the scalar meta template and the timeseries meta template to build your metadata Use the oemetadata builder to create and edit your metadata -> copy scalar/timeseries meta template -> click on blue button \"Edit JSON\" -> click in opening window, with CTRL+A select all and paste scalar/timeseries meta template -> click \"save\" to confirm Fill in as many keys as possible, but at least the minimum required metadata information Annotate the keys subject , isAbout and/or valueReference with useful ontological concepts using the oemetadata builder -> go to the column you want to annotate -> click on blue button \"Add isAbout\" or \"Add Value reference\" or \"Add Subject\" -> click into the name line -> type in the concept you're looking for -> choose a suitable ontology concept from the dropdown menu -> click to confirm List all data sources in the form of Bibtex-keys under the sources key Add necessary license information to the sources according to the licensing guide todo @JH-rli: Will there be a save metadata button or does the user go back to the \"Edit JSON\" button to extract the metadata? 3. Initialize table on the OEP \u00b6 In order to add data to an OEP table, the (empty) table must be initialized on the OEP in the first place. In order to create the table, the resource from metadata is used, whereby the name of the resource is used to define the OEP schema and the table name (table_name, to avoid spaces) in a pattern of \"shema.table_name\" (i.e. \"name\": \"model_draft.sedos_tech_wind_turbine\") And the fields from resource schema are used to create the related columns of the table. Initializing OEP table is done via: Visit oedatamodel-API Insert your OEP Username and Token Select metadata file to create OEP table from Submit 4. Publish datapackages \u00b6 The following step-by-step guide will show how to store data on the OEP and make it publicly available. As this guide is meant for developers of AP4-8, the oedatamodel-parameter will be used in the following. Prerequisite for publishing on OEP Data exists in oedatamodel-parameter format as CSV file Metadata exists with mandatory set of metadata information filled OEP user account Databus user account (Create account on \"Login\" button) Databus API Key (On Databus go to Profile -> Settings -> Scroll down to \"Create New API Key\" to generate key) Table has been created on OEP 4.1 Upload data to OEP with oedatamodel-API \u00b6 The oedatamodel-API uploads CSV files to the OEP. While uploading, incoming data is checked against metadata schema from related table. Thus, Prepare upload data in CSV file according to metadata in related table Then open the oedatamodel-API Insert your token, enter table name and schema (defaults to \"model_draft\") and select your CSV file Click Datei absenden to upload In case upload data contains errors (format, naming, etc.) an error report is returned. Otherwise, data is appended to given table on the OEP. 4.2 Release data on the databus \u00b6 The oedatamodel-API can also register your datapackages on the databus. Registering data on the databus must be done everytime, a new version of the data is available on the OEP. In order to register your new data you have to: Open the oedatamodel-API Enter your username (username is not email address) and API Token Enter table name and schema (defaults to \"model_draft\") Enter new version string (at least one row in your table must be present with given string in column \"version\") Submit it. Now, your data should be registered and available on the databus. As the SEDOS pipeline regularly checks for updates on the databus, your new data version should be considered in next pipeline build. 5. Create output data tables \u00b6 @HeHu & CM expand when process is clear Collect and postprocess modelling results into the tabular OEDatamodel by following the output data conventions](input_data.md#Output-data-conventions)","title":"How to contribute data?"},{"location":"how_to_contribute_data/#how#to#contribute#data","text":"The following instructions will guide you through the process of contributing data in the SEDOS project. Hyperlinks direct you to more detailed information regarding the subject.","title":"How to contribute data?"},{"location":"how_to_contribute_data/#1#create#input#data#tables","text":"Collect and preprocess data into the tabular oedatamodel-parameter ( scalar or timeseries ) thereby following the input data conventions Store data sources in BIB-file and fill Bibtex-keys in \"source\"-column of the data table. Note timeseries data and scalar data are stored in two different tables","title":"1. Create input data tables"},{"location":"how_to_contribute_data/#2#create#metadata","text":"Create the metadata according to the OEMetadata v.1.5.1 for each data table Use the scalar meta template and the timeseries meta template to build your metadata Use the oemetadata builder to create and edit your metadata -> copy scalar/timeseries meta template -> click on blue button \"Edit JSON\" -> click in opening window, with CTRL+A select all and paste scalar/timeseries meta template -> click \"save\" to confirm Fill in as many keys as possible, but at least the minimum required metadata information Annotate the keys subject , isAbout and/or valueReference with useful ontological concepts using the oemetadata builder -> go to the column you want to annotate -> click on blue button \"Add isAbout\" or \"Add Value reference\" or \"Add Subject\" -> click into the name line -> type in the concept you're looking for -> choose a suitable ontology concept from the dropdown menu -> click to confirm List all data sources in the form of Bibtex-keys under the sources key Add necessary license information to the sources according to the licensing guide todo @JH-rli: Will there be a save metadata button or does the user go back to the \"Edit JSON\" button to extract the metadata?","title":"2. Create metadata"},{"location":"how_to_contribute_data/#3#initialize#table#on#the#oep","text":"In order to add data to an OEP table, the (empty) table must be initialized on the OEP in the first place. In order to create the table, the resource from metadata is used, whereby the name of the resource is used to define the OEP schema and the table name (table_name, to avoid spaces) in a pattern of \"shema.table_name\" (i.e. \"name\": \"model_draft.sedos_tech_wind_turbine\") And the fields from resource schema are used to create the related columns of the table. Initializing OEP table is done via: Visit oedatamodel-API Insert your OEP Username and Token Select metadata file to create OEP table from Submit","title":"3. Initialize table on the OEP"},{"location":"how_to_contribute_data/#4#publish#datapackages","text":"The following step-by-step guide will show how to store data on the OEP and make it publicly available. As this guide is meant for developers of AP4-8, the oedatamodel-parameter will be used in the following. Prerequisite for publishing on OEP Data exists in oedatamodel-parameter format as CSV file Metadata exists with mandatory set of metadata information filled OEP user account Databus user account (Create account on \"Login\" button) Databus API Key (On Databus go to Profile -> Settings -> Scroll down to \"Create New API Key\" to generate key) Table has been created on OEP","title":"4. Publish datapackages"},{"location":"how_to_contribute_data/#41#upload#data#to#oep#with#oedatamodel-api","text":"The oedatamodel-API uploads CSV files to the OEP. While uploading, incoming data is checked against metadata schema from related table. Thus, Prepare upload data in CSV file according to metadata in related table Then open the oedatamodel-API Insert your token, enter table name and schema (defaults to \"model_draft\") and select your CSV file Click Datei absenden to upload In case upload data contains errors (format, naming, etc.) an error report is returned. Otherwise, data is appended to given table on the OEP.","title":"4.1 Upload data to OEP with oedatamodel-API"},{"location":"how_to_contribute_data/#42#release#data#on#the#databus","text":"The oedatamodel-API can also register your datapackages on the databus. Registering data on the databus must be done everytime, a new version of the data is available on the OEP. In order to register your new data you have to: Open the oedatamodel-API Enter your username (username is not email address) and API Token Enter table name and schema (defaults to \"model_draft\") Enter new version string (at least one row in your table must be present with given string in column \"version\") Submit it. Now, your data should be registered and available on the databus. As the SEDOS pipeline regularly checks for updates on the databus, your new data version should be considered in next pipeline build.","title":"4.2 Release data on the databus"},{"location":"how_to_contribute_data/#5#create#output#data#tables","text":"@HeHu & CM expand when process is clear Collect and postprocess modelling results into the tabular OEDatamodel by following the output data conventions](input_data.md#Output-data-conventions)","title":"5. Create output data tables"},{"location":"data_requirements/input_data/","text":"Input data \u00b6 Datamodel \u00b6 The oedatamodel-parameter ( docs ) has to be used to provide input data in SEDOS. This choice was made to allow ontological annotation of data. This data model consists of two table types \" scalar \" and \" timeseries \". Please choose the table type accordingly depending on the data you want to upload: Use scalar tables to provide parameters with no time relationships. To properly fill them read the scalar model column description . Use the example scalar package metadata to write your own (see section How to contribute data - 2. Create metadata To provide parameters with time relationships use a timeseries table. Use the timeseries model column description to orient yourself with the fields and add metadata to your tables using the example timeseries package metadata as a reference. Input and output energy vectors \u00b6 The input and output energy vectors of technologies in SEDOS' reference energy system are defined in an external table. For technologies with multiple input and/or output energy vectors it is not clear to which energy vector a parameter column refers. To account for this the inputs and outputs of process parameters will be collected in separate tables in the database (see below). Data tables \u00b6 Naming conventions for data tables and parameters \u00b6 Note Parameter name and table name conventions are in place due to technical reasons of the underlying relational postgre-sql database on the OEP. The following conventions will be automatically checked when uploading a table on the OEP, and error messages will be raised in case of violation. Users need to correct them and their compliance is mandatory. Do's \u00b6 use ASCII characters only use lower case only use the singular instead of the plural. use underscores Don'ts \u00b6 table name must not exceed maximal character limit = 50 no points no commas no spaces no special characters avoid dates if dates are used, then without - ! E.g.: 2022-10-21 will through an error. Use underscore instead! don't start parameter name with a number Delimiter \u00b6 Use semicolon ; as the column delimiter. Decimal separator \u00b6 Use point . as decimal separator. Table naming \u00b6 Note Create a new datapackage for each technology, e.g. wind_onshore, chp, ... You can use a single datapackage for both demand data and constraints (tech-independent parameters) if the table size is sufficient, e.g.: * emission limit, * natural domestic limit, * WACC To increase the discoverability and searchability of the data, we require the following table naming convention: sedos_tech _[technologyname, e.g. wind_turbine] sedos_demand _[demandname, e.g. household_residential] sedos_constraint _[constraintname, e.g co2_emission-yearly] For example: sedos_tech _wind_turbine sedos_demand _household_residential sedos_constraint _co2_emission-yearly Parameter naming \u00b6 Note Parameter names must be linked to a concept in an ontology Parameter names (to specify technologies, constraints or techno-economic values) can basically be chosen freely. However, it is of utmost importance that every parameter name is linked to a suitable ontological concept via the metadata to enable its clear interpretation. In case you cannot find a suitable ontology concept (e.g. because it's not in the ontology yet), please make sure your chosen parameter name is clear and common in the domain. In this case avoid acronyms. For more background information regarding for linking parameter names and ontology concepts, using OEM, see here . For a practical manual linking parameter names to a suitable ontology concepts, using oemetadata builder, see here . Parameter naming in case of missing suitable ontology concept \u00b6 It is likely that not every parameter concept is already covered by an ontology. In this case, linking your parameter name to a suitable ontology concept is not directly possible. It might, however, be indirectly possible by linking it to a distinct selection of related ontology concepts. In this case you would link your parameter name to multiple related concepts. For a practical manual linking parameter names to multiple related ontology concepts, using oemetadata builder, see here . Output Data \u00b6 Output Datamodel \u00b6 Datamodel: The OEDatamodel is used to represent input/output data for energysystem modelling. Further information about the OEDatamodel can be found in the documentation at sedos-project/oedatamodel .","title":"Data"},{"location":"data_requirements/input_data/#input#data","text":"","title":"Input data"},{"location":"data_requirements/input_data/#datamodel","text":"The oedatamodel-parameter ( docs ) has to be used to provide input data in SEDOS. This choice was made to allow ontological annotation of data. This data model consists of two table types \" scalar \" and \" timeseries \". Please choose the table type accordingly depending on the data you want to upload: Use scalar tables to provide parameters with no time relationships. To properly fill them read the scalar model column description . Use the example scalar package metadata to write your own (see section How to contribute data - 2. Create metadata To provide parameters with time relationships use a timeseries table. Use the timeseries model column description to orient yourself with the fields and add metadata to your tables using the example timeseries package metadata as a reference.","title":"Datamodel"},{"location":"data_requirements/input_data/#input#and#output#energy#vectors","text":"The input and output energy vectors of technologies in SEDOS' reference energy system are defined in an external table. For technologies with multiple input and/or output energy vectors it is not clear to which energy vector a parameter column refers. To account for this the inputs and outputs of process parameters will be collected in separate tables in the database (see below).","title":"Input and output energy vectors"},{"location":"data_requirements/input_data/#data#tables","text":"","title":"Data tables"},{"location":"data_requirements/input_data/#naming#conventions#for#data#tables#and#parameters","text":"Note Parameter name and table name conventions are in place due to technical reasons of the underlying relational postgre-sql database on the OEP. The following conventions will be automatically checked when uploading a table on the OEP, and error messages will be raised in case of violation. Users need to correct them and their compliance is mandatory.","title":"Naming conventions for data tables and parameters"},{"location":"data_requirements/input_data/#dos","text":"use ASCII characters only use lower case only use the singular instead of the plural. use underscores","title":"Do's"},{"location":"data_requirements/input_data/#donts","text":"table name must not exceed maximal character limit = 50 no points no commas no spaces no special characters avoid dates if dates are used, then without - ! E.g.: 2022-10-21 will through an error. Use underscore instead! don't start parameter name with a number","title":"Don'ts"},{"location":"data_requirements/input_data/#delimiter","text":"Use semicolon ; as the column delimiter.","title":"Delimiter"},{"location":"data_requirements/input_data/#decimal#separator","text":"Use point . as decimal separator.","title":"Decimal separator"},{"location":"data_requirements/input_data/#table#naming","text":"Note Create a new datapackage for each technology, e.g. wind_onshore, chp, ... You can use a single datapackage for both demand data and constraints (tech-independent parameters) if the table size is sufficient, e.g.: * emission limit, * natural domestic limit, * WACC To increase the discoverability and searchability of the data, we require the following table naming convention: sedos_tech _[technologyname, e.g. wind_turbine] sedos_demand _[demandname, e.g. household_residential] sedos_constraint _[constraintname, e.g co2_emission-yearly] For example: sedos_tech _wind_turbine sedos_demand _household_residential sedos_constraint _co2_emission-yearly","title":"Table naming"},{"location":"data_requirements/input_data/#parameter#naming","text":"Note Parameter names must be linked to a concept in an ontology Parameter names (to specify technologies, constraints or techno-economic values) can basically be chosen freely. However, it is of utmost importance that every parameter name is linked to a suitable ontological concept via the metadata to enable its clear interpretation. In case you cannot find a suitable ontology concept (e.g. because it's not in the ontology yet), please make sure your chosen parameter name is clear and common in the domain. In this case avoid acronyms. For more background information regarding for linking parameter names and ontology concepts, using OEM, see here . For a practical manual linking parameter names to a suitable ontology concepts, using oemetadata builder, see here .","title":"Parameter naming"},{"location":"data_requirements/input_data/#parameter#naming#in#case#of#missing#suitable#ontology#concept","text":"It is likely that not every parameter concept is already covered by an ontology. In this case, linking your parameter name to a suitable ontology concept is not directly possible. It might, however, be indirectly possible by linking it to a distinct selection of related ontology concepts. In this case you would link your parameter name to multiple related concepts. For a practical manual linking parameter names to multiple related ontology concepts, using oemetadata builder, see here .","title":"Parameter naming in case of missing suitable ontology concept"},{"location":"data_requirements/input_data/#output#data","text":"","title":"Output Data"},{"location":"data_requirements/input_data/#output#datamodel","text":"Datamodel: The OEDatamodel is used to represent input/output data for energysystem modelling. Further information about the OEDatamodel can be found in the documentation at sedos-project/oedatamodel .","title":"Output Datamodel"},{"location":"data_requirements/licensing/","text":"Data Licencing \u00b6 In the SEDOS project, Open Data is one of the main criteria for developing the Reference Energy System (RES) database. Open Data implies adequate licencing as a legal requirement, hence why this section aims to bring you up to speed regarding the nitty-gritty of licencing. By the end of this section, you'll be able to licence your input data adequately. Which data licences are suitable in SEDOS? \u00b6 For the data collection in WP3-8, you should choose data published under one of the listed licences below. Add the licence spdx-id and/or correct attribution for respective source in the metadata ( oem-key 12.4.1-5 ). If your data is published under an open licence not listed below, please get in touch with datenzentrum@rl-institut.de. Please note: non-conformant clauses such as NC (non commercial) and ND (no derivates) are NOT Open Data licences and must not be used. Public Domain: All rights granted. CC0-1.0 | recommended PDDL-1.0 | recommended dl-de/zero-2-0 | granted by German government CC-PDDC | not recommended Attribution/Permissive: Use rights and relicensing granted. Proprietisation is possible. Correct attribution is required (see licence link). CC-BY-4.0 | recommended ODC-By-1.0 | recommended CDLA-Permissive-1.0 dl-de/by-2-0 (no official spdx-id) | granted only by the German government GeoZG (no official spdx-id) | granted by German government | GeoNutzV | granted by German government Share-alike (Copyleft): Use rights granted, propitiation impossible. ODbL-1.0 | recommended CC-BY-SA-4.0 | not recommended For further information on licences, see * OEP Tutorial on Open-Data Licences * ifrOSS GitHub * Open Definition Using data without an open licence? \u00b6 If you want to use a data set without a licence or an open data licence, try the following steps: Contact the authors of the data set and ask for either the licence or send a request for user-and relicensing rights. Templates in DE and EN can be found here: https://bwsyncandshare.kit.edu/f/2369369032 . Please add datenzentrum@rl-institut.de to the CC of the Email-loop and store a positive response here: https://bwsyncandshare.kit.edu/f/2369341357 You can use the unlicensed data if you only extract a considerable small subset of a larger data set. If your data set has no licence, please indicate the licence as \"unknown\" in the licence field of the metadata. If the data set has a licence, add the spdx-id to the licence field of the metadata.","title":"Licensing"},{"location":"data_requirements/licensing/#data#licencing","text":"In the SEDOS project, Open Data is one of the main criteria for developing the Reference Energy System (RES) database. Open Data implies adequate licencing as a legal requirement, hence why this section aims to bring you up to speed regarding the nitty-gritty of licencing. By the end of this section, you'll be able to licence your input data adequately.","title":"Data Licencing"},{"location":"data_requirements/licensing/#which#data#licences#are#suitable#in#sedos","text":"For the data collection in WP3-8, you should choose data published under one of the listed licences below. Add the licence spdx-id and/or correct attribution for respective source in the metadata ( oem-key 12.4.1-5 ). If your data is published under an open licence not listed below, please get in touch with datenzentrum@rl-institut.de. Please note: non-conformant clauses such as NC (non commercial) and ND (no derivates) are NOT Open Data licences and must not be used. Public Domain: All rights granted. CC0-1.0 | recommended PDDL-1.0 | recommended dl-de/zero-2-0 | granted by German government CC-PDDC | not recommended Attribution/Permissive: Use rights and relicensing granted. Proprietisation is possible. Correct attribution is required (see licence link). CC-BY-4.0 | recommended ODC-By-1.0 | recommended CDLA-Permissive-1.0 dl-de/by-2-0 (no official spdx-id) | granted only by the German government GeoZG (no official spdx-id) | granted by German government | GeoNutzV | granted by German government Share-alike (Copyleft): Use rights granted, propitiation impossible. ODbL-1.0 | recommended CC-BY-SA-4.0 | not recommended For further information on licences, see * OEP Tutorial on Open-Data Licences * ifrOSS GitHub * Open Definition","title":"Which data licences are suitable in SEDOS?"},{"location":"data_requirements/licensing/#using#data#without#an#open#licence","text":"If you want to use a data set without a licence or an open data licence, try the following steps: Contact the authors of the data set and ask for either the licence or send a request for user-and relicensing rights. Templates in DE and EN can be found here: https://bwsyncandshare.kit.edu/f/2369369032 . Please add datenzentrum@rl-institut.de to the CC of the Email-loop and store a positive response here: https://bwsyncandshare.kit.edu/f/2369341357 You can use the unlicensed data if you only extract a considerable small subset of a larger data set. If your data set has no licence, please indicate the licence as \"unknown\" in the licence field of the metadata. If the data set has a licence, add the spdx-id to the licence field of the metadata.","title":"Using data without an open licence?"},{"location":"data_requirements/metadata/","text":"Metadata \u00b6 In SEDOS the metadata standard OEMetadata v.1.5.1 is used. Required metadata information \u00b6 In SEDOS a minimal mandatory set of metadata information is required to: automatically process the input data in the data pipeline, to provide useful context for data interpretation, and to fulfil legal requirements. Mandatory set of metadata information \u00b6 OEMetadata templates exist You can build upon metadata templates ( scalar template and timeseries template ). Providing the following oem-keys when submitting your metadata is mandatory. General Keys \u00b6 # Key Description Example 1 name A file name or database table name. oep_metadata_table_example_v15 2 title A human readable full title including author. RLI - OEMetadata - Metadata example table 4 description A description or abstract of the package. It should be usable as summary information for the entire package that is described by the metadata. Example table used to illustrate the metadata structure and meaning. 6 subject An array of objects with topics of the data in OEO terms. 6.1 name The class label of the OEO terms. energy 6.2 path The URI of the class. https://openenergy-platform.org/ontology/oeo/OEO_00000150 8 publicationDate A date of publishing of the data or metadata. Date format is ISO 8601 (YYYY-MM-DD). 2019-02-06 Source Keys \u00b6 Information about the individual sources the data stems from. # Key Description Example 12 sources An array of objects with the used and underlying sources of the data and metadata. 12.1 title A human readable title of the source, a document title or organisation name. IPCC Fifth Assessment Report 12.2 description A free text description of the data set. Scientific climate change report by the UN 12.3 path A URL to the original source. https://www.ipcc.ch/site/assets/uploads/2018/02/ipcc_wg3_ar5_full.pdf 12.4 licenses An array of objects under which the source is provided. 12.4.1 name The SPDX identifier. ODbL-1.0 12.4.2 title The official (human readable) title of the license. Open Data Commons Open Database License 1.0 12.4.3 path A link to the license text. https://opendatacommons.org/licenses/odbl/1-0/index.html 12.4.4 instruction A short description of rights and restrictions. The use of tl;drLegal is recommended. You are free to share and change, but you must attribute, and share derivations under the same license. See https://tldrlegal.com/license/odc-open-database-license-(odbl) for further information. 12.4.5 attribution The copyright owner of the source. If attribution licenses are used, that name must be acknowledged. \u00a9 Intergovernmental Panel on Climate Change 2014 License Keys \u00b6 The license of your entire csv. # Key Description Example 13 licenses An array of objects of the license(s) under which the described package is provided. It can depend on the licenses of the sources (copyleft or share-alike) or can be granted by the creator of the data. 13.1 name The SPDX identifier. ODbL-1.0 13.2 title The official (human readable) title of the license. Open Data Commons Open Database License 1.0 13.3 path A link to the license text. https://opendatacommons.org/licenses/odbl/1-0/index.html 13.4 instruction A short description of rights and restrictions. The use of tl;drLegal is recommended. You are free to share and change, but you must attribute, and share derivations under the same license. See https://tldrlegal.com/license/odc-open-database-license-(odbl) for further information. 13.5 attribution The copyright owner of the data. If attribution licenses are used, that name must be acknowledged. \u00a9 Reiner Lemoine Institut Provenience Keys \u00b6 Information about changes on the metadata. # Key Description Example 14 contributors An array of objects of the people or organizations who contributed to the data or metadata. Each object refers to one contributor. Every contributor must have a title and property. The path, email, role and organization properties are optional. 14.1 title A name of the contributor. Ludwig H\u00fclk 14.2 email A email address of the contributor or GitHub handle. @Ludee 14.3 date The date of the contribution. If the contribution took more than a day, use the date of the final contribiution. Date Format is ISO 8601. 2016-06-16 14.4 object The target of the contribution. Which part of the package was supplied or changed. Can be the data, metadata or both (data and metadata). data and metadata 14.5 comment A free text commentary on what has been done. Fixed a typo in the title. Resource Keys \u00b6 Needed to process the csv-table for the OEP. # Key Description Example 15 resources An array of objects of the data. It describes the data resource as an individual file or (database) table. 15.1 profile The profile of this descriptor according to the profiles specification. This information is retained in order to comply with the \"Tabular Data Package\" standard. Use \"tabular-data-resource\" for all tables. tabular-data-resource 15.2 name A name for the entire data package. The name must consist of only lowercase alphanumeric characters or underscore. It must not start with a number or underscore. In a database, this will be the name of the table within the schema containing it. The name can correspond to the file name (minus the file-extension) of the data file describing the resource, if it complies with the naming convention above. Name also contains information about the shema on the OEP, use \".\" to seperate shema from table name. openstreetmap.osm_deu_line 15.3 path A URL that should be a permanent http(s) address or other path directly linking to the resource. https://openenergy-platform.org/dataedit/view/openstreetmap/osm_deu_line 15.4 format The file extension. 'csv', 'xls', 'json' etc. would be expected to be the standard file extension for this type of resource. When you upload your data to the OEDB, in the shown metadata string, the format will be changed accordingly to 'PostgreSQL', since the data there are stored in a database. PostgreSQL 15.5 encoding Specifies the character encoding of the resource's data file. The values should be one of the \"Preferred MIME Names\" for a character encoding registered with IANA. If no value for this key is specified then the default is UTF-8. UTF-8 Resource Keys - Schema \u00b6 Information about each column in the csv. # Key Description Example 15.6 schema An object that describes the structure of the present data. It contains all fields (columns of the table), the primary key and optional foreign keys. 15.6.1 fields An array of objects describing a column and providing name, description, type and unit. 15.6.1.1 name The name of the field. The name must consist of only lowercase alphanumeric characters or underscore. It must not start with a number or underscore. year 15.6.1.2 description A text describing the field. Reference year for which the data were collected. 15.6.1.3 type The data type of the field. In case of a geom column in a database, also indicate the shape and CRS. geometry(Point, 4326) 15.6.1.4 unit The unit, preferably SI-unit, that values in this field are mapped to. If 'unit' doesn't apply to a field, use 'null'. If the unit is given in a seperate field, reference this field. MW 15.6.1.5 isAbout An array of objects with describe the field in OEO terms. 15.6.1.5.1 name The class label of the OEO terms. wind energy converting unit 15.6.1.5.2 path The URI of the class. https://openenergy-platform.org/ontology/oeo/OEO_00000044 15.6.1.6 valueReference An array of objects for an extended description of the values in the column in OEO terms. 15.6.1.6.1 value The name of the value in the column. onshore 15.6.1.6.2 name The class label of the OEO terms. onshore wind farm 15.6.1.6.3 path The URI of the class. https://openenergy-platform.org/ontology/oeo/OEO_00000311 Review Keys \u00b6 When using the provided templates above, the review keys are prefilled already. # Key Description Example 17 @context Necessary for registering Data on the Databus and to be SPARQL-able https://raw.githubusercontent.com/OpenEnergyPlatform/oemetadata/master/metadata/latest/context.json Datatypes \u00b6 Available datatypes and corresponding formatting examples: dtype example comment json \"{\"\"key1\"\": \"\"text\"\", \"\"key2\"\": \"\"text\"\"}\" csv seperator should be \";\" float array [0.02, 279.5] arrays with strings should be formatted as strings (\"['string1', 'string2']\" text \"text\" String data should have text as datatype (text serves as \"string\") integer 27","title":"Metadata"},{"location":"data_requirements/metadata/#metadata","text":"In SEDOS the metadata standard OEMetadata v.1.5.1 is used.","title":"Metadata"},{"location":"data_requirements/metadata/#required#metadata#information","text":"In SEDOS a minimal mandatory set of metadata information is required to: automatically process the input data in the data pipeline, to provide useful context for data interpretation, and to fulfil legal requirements.","title":"Required metadata information"},{"location":"data_requirements/metadata/#mandatory#set#of#metadata#information","text":"OEMetadata templates exist You can build upon metadata templates ( scalar template and timeseries template ). Providing the following oem-keys when submitting your metadata is mandatory.","title":"Mandatory set of metadata information"},{"location":"data_requirements/metadata/#general#keys","text":"# Key Description Example 1 name A file name or database table name. oep_metadata_table_example_v15 2 title A human readable full title including author. RLI - OEMetadata - Metadata example table 4 description A description or abstract of the package. It should be usable as summary information for the entire package that is described by the metadata. Example table used to illustrate the metadata structure and meaning. 6 subject An array of objects with topics of the data in OEO terms. 6.1 name The class label of the OEO terms. energy 6.2 path The URI of the class. https://openenergy-platform.org/ontology/oeo/OEO_00000150 8 publicationDate A date of publishing of the data or metadata. Date format is ISO 8601 (YYYY-MM-DD). 2019-02-06","title":"General Keys"},{"location":"data_requirements/metadata/#source#keys","text":"Information about the individual sources the data stems from. # Key Description Example 12 sources An array of objects with the used and underlying sources of the data and metadata. 12.1 title A human readable title of the source, a document title or organisation name. IPCC Fifth Assessment Report 12.2 description A free text description of the data set. Scientific climate change report by the UN 12.3 path A URL to the original source. https://www.ipcc.ch/site/assets/uploads/2018/02/ipcc_wg3_ar5_full.pdf 12.4 licenses An array of objects under which the source is provided. 12.4.1 name The SPDX identifier. ODbL-1.0 12.4.2 title The official (human readable) title of the license. Open Data Commons Open Database License 1.0 12.4.3 path A link to the license text. https://opendatacommons.org/licenses/odbl/1-0/index.html 12.4.4 instruction A short description of rights and restrictions. The use of tl;drLegal is recommended. You are free to share and change, but you must attribute, and share derivations under the same license. See https://tldrlegal.com/license/odc-open-database-license-(odbl) for further information. 12.4.5 attribution The copyright owner of the source. If attribution licenses are used, that name must be acknowledged. \u00a9 Intergovernmental Panel on Climate Change 2014","title":"Source Keys"},{"location":"data_requirements/metadata/#license#keys","text":"The license of your entire csv. # Key Description Example 13 licenses An array of objects of the license(s) under which the described package is provided. It can depend on the licenses of the sources (copyleft or share-alike) or can be granted by the creator of the data. 13.1 name The SPDX identifier. ODbL-1.0 13.2 title The official (human readable) title of the license. Open Data Commons Open Database License 1.0 13.3 path A link to the license text. https://opendatacommons.org/licenses/odbl/1-0/index.html 13.4 instruction A short description of rights and restrictions. The use of tl;drLegal is recommended. You are free to share and change, but you must attribute, and share derivations under the same license. See https://tldrlegal.com/license/odc-open-database-license-(odbl) for further information. 13.5 attribution The copyright owner of the data. If attribution licenses are used, that name must be acknowledged. \u00a9 Reiner Lemoine Institut","title":"License Keys"},{"location":"data_requirements/metadata/#provenience#keys","text":"Information about changes on the metadata. # Key Description Example 14 contributors An array of objects of the people or organizations who contributed to the data or metadata. Each object refers to one contributor. Every contributor must have a title and property. The path, email, role and organization properties are optional. 14.1 title A name of the contributor. Ludwig H\u00fclk 14.2 email A email address of the contributor or GitHub handle. @Ludee 14.3 date The date of the contribution. If the contribution took more than a day, use the date of the final contribiution. Date Format is ISO 8601. 2016-06-16 14.4 object The target of the contribution. Which part of the package was supplied or changed. Can be the data, metadata or both (data and metadata). data and metadata 14.5 comment A free text commentary on what has been done. Fixed a typo in the title.","title":"Provenience Keys"},{"location":"data_requirements/metadata/#resource#keys","text":"Needed to process the csv-table for the OEP. # Key Description Example 15 resources An array of objects of the data. It describes the data resource as an individual file or (database) table. 15.1 profile The profile of this descriptor according to the profiles specification. This information is retained in order to comply with the \"Tabular Data Package\" standard. Use \"tabular-data-resource\" for all tables. tabular-data-resource 15.2 name A name for the entire data package. The name must consist of only lowercase alphanumeric characters or underscore. It must not start with a number or underscore. In a database, this will be the name of the table within the schema containing it. The name can correspond to the file name (minus the file-extension) of the data file describing the resource, if it complies with the naming convention above. Name also contains information about the shema on the OEP, use \".\" to seperate shema from table name. openstreetmap.osm_deu_line 15.3 path A URL that should be a permanent http(s) address or other path directly linking to the resource. https://openenergy-platform.org/dataedit/view/openstreetmap/osm_deu_line 15.4 format The file extension. 'csv', 'xls', 'json' etc. would be expected to be the standard file extension for this type of resource. When you upload your data to the OEDB, in the shown metadata string, the format will be changed accordingly to 'PostgreSQL', since the data there are stored in a database. PostgreSQL 15.5 encoding Specifies the character encoding of the resource's data file. The values should be one of the \"Preferred MIME Names\" for a character encoding registered with IANA. If no value for this key is specified then the default is UTF-8. UTF-8","title":"Resource Keys"},{"location":"data_requirements/metadata/#resource#keys#-#schema","text":"Information about each column in the csv. # Key Description Example 15.6 schema An object that describes the structure of the present data. It contains all fields (columns of the table), the primary key and optional foreign keys. 15.6.1 fields An array of objects describing a column and providing name, description, type and unit. 15.6.1.1 name The name of the field. The name must consist of only lowercase alphanumeric characters or underscore. It must not start with a number or underscore. year 15.6.1.2 description A text describing the field. Reference year for which the data were collected. 15.6.1.3 type The data type of the field. In case of a geom column in a database, also indicate the shape and CRS. geometry(Point, 4326) 15.6.1.4 unit The unit, preferably SI-unit, that values in this field are mapped to. If 'unit' doesn't apply to a field, use 'null'. If the unit is given in a seperate field, reference this field. MW 15.6.1.5 isAbout An array of objects with describe the field in OEO terms. 15.6.1.5.1 name The class label of the OEO terms. wind energy converting unit 15.6.1.5.2 path The URI of the class. https://openenergy-platform.org/ontology/oeo/OEO_00000044 15.6.1.6 valueReference An array of objects for an extended description of the values in the column in OEO terms. 15.6.1.6.1 value The name of the value in the column. onshore 15.6.1.6.2 name The class label of the OEO terms. onshore wind farm 15.6.1.6.3 path The URI of the class. https://openenergy-platform.org/ontology/oeo/OEO_00000311","title":"Resource Keys - Schema"},{"location":"data_requirements/metadata/#review#keys","text":"When using the provided templates above, the review keys are prefilled already. # Key Description Example 17 @context Necessary for registering Data on the Databus and to be SPARQL-able https://raw.githubusercontent.com/OpenEnergyPlatform/oemetadata/master/metadata/latest/context.json","title":"Review Keys"},{"location":"data_requirements/metadata/#datatypes","text":"Available datatypes and corresponding formatting examples: dtype example comment json \"{\"\"key1\"\": \"\"text\"\", \"\"key2\"\": \"\"text\"\"}\" csv seperator should be \";\" float array [0.02, 279.5] arrays with strings should be formatted as strings (\"['string1', 'string2']\" text \"text\" String data should have text as datatype (text serves as \"string\") integer 27","title":"Datatypes"},{"location":"data_requirements/ontology/","text":"Ontological annotation of data \u00b6 Basic annotation knowledge with OEM \u00b6 Ontological annotation of data means that data is linked to ontological concepts in the metadata. In SEDOS we use the oemetadata v.1.5.1 (OEM) as metadata standard. For more context about the OEM-keys in oemetadata v.1.5.1, see here . In energy systems modelling, data is fed into a model via parameters and their associated values. In the following, when we speak about ontological annotation, we, therefore, speak of parameter names, which are linked to an ontological concept for definition. The linkage of parameter name and ontological concept in OEM has three elements: user-defined parameter name human-readable ontological concept name Internationalized Resource Identifier (IRI) Below the general section of the oemetadata v1.5.1 is shown, relevant for the ontological annotation of the table content itself . The general content of the table is annotated in the subject key { \"name\" : null , \"title\" : null , \"id\" : null , \"description\" : null , \"language\" : [ null ], \"subject\" : [ { \"name\" : null , \"path\" : null } ], \"keywords\" : [ null ], \"publicationDate\" : null } Below the resource section of the oemetadata v1.5.1 is shown, relevant for ontological annotation of parameter names . Link a parameter name to a suitable ontology concept \u00b6 Background know-how \u00b6 Parameters can occur in the column header or as column value when dealing with tabular data. A) Parameters in the column headers are annotated in the isAbout key. B) Parameters occurring within a column are annotated in the valueReference key. { \"resources\" : [ { \"profile\" : null , \"name\" : null , \"path\" : null , \"format\" : null , \"encoding\" : null , \"schema\" : { \"fields\" : [ { \"name\" : null , \"description\" : null , \"type\" : null , \"unit\" : null , \"isAbout\" : [ { \"name\" : null , \"path\" : null } ], \"valueReference\" : [ { \"value\" : null , \"name\" : null , \"path\" : null } ] } ] } } ] } A) Parameters in the column headers - using isAbout : user-defined parameter name is put in name (OEM-key 15.6.1.1), a suitable human-readable ontological concept name is put in name (OEM-key 15.6.1.5.1), Internationalized Resource Identifier (IRI) is put in path (OEM-key 15.6.1.5.2) For example: A column with values for the rotor diameter of a wind turbine: id wind_turbine ro_diam 1 type A 50 2 type A 60 3 type A 70 4 type B 80 5 type B 110 { \"resources\" : [ { \"profile\" : null , \"name\" : null , \"path\" : null , \"format\" : null , \"encoding\" : null , \"schema\" : { \"fields\" : [ { \"name\" : \"wind_turbine\" , \"description\" : null , \"type\" : null , \"unit\" : null , \"isAbout\" : [ { \"name\" : \"wind energy converting unit\" , \"path\" : \"http://openenergy-platform.org/ontology/oeo/OEO_00000044\" } ], \"valueReference\" : [ { \"value\" : null , \"name\" : null , \"path\" : null } ] }, { \"name\" : \"ro_diam\" , \"description\" : null , \"type\" : null , \"unit\" : \"meter\" , \"isAbout\" : [ { \"name\" : \"rotor diameter\" , \"path\" : \"http://openenergy-platform.org/ontology/oeo/OEO_00020144\" } ], \"valueReference\" : [ { \"value\" : null , \"name\" : null , \"path\" : null } ] } ] } } ] } B) Parameters within a column - using valueReference and isAbout : valueReference user-defined parameter name is put in value (OEM-key 15.6.1.6.1), a suitable human-readable ontological concept name is put in name (OEM-key 15.6.1.6.2), Internationalized Resource Identifier (IRI) is put in path (OEM-key 15.6.1.6.3) isAbout When annotating using valueReference , don't forget to annotate the column itself in isAbout , as described in A). For example: A column containing various types of fuels: id various_types_of_energy_carriers 1 coal_HCV 2 green_diesel 3 coal_LCV { \"resources\" : [ { \"profile\" : null , \"name\" : null , \"path\" : null , \"format\" : null , \"encoding\" : null , \"schema\" : { \"fields\" : [ { \"name\" : \"various_types_of_energy_carriers\" , \"description\" : null , \"type\" : null , \"unit\" : null , \"isAbout\" : [ { \"name\" : \"portion of matter\" , \"path\" : \"http://openenergy-platform.org/ontology/oeo/OEO_00000331\" } ], \"valueReference\" : [ { \"value\" : \"coal_HCV\" , \"name\" : \"anthracite\" , \"path\" : \"http://openenergy-platform.org/ontology/oeo/OEO_00000058\" }, { \"value\" : \"green_diesel\" , \"name\" : \"biodiesel\" , \"path\" : \"http://openenergy-platform.org/ontology/oeo/OEO_00000071\" }, { \"value\" : \"coal_LCV\" , \"name\" : \"lignite\" , \"path\" : \"http://openenergy-platform.org/ontology/oeo/OEO_00000251\" } ] } ] } } ] } With oemetadata builder \u00b6 Annotation conventions for automatic data processing \u00b6 In SEDOS, automatic data reasoning and processing are based mainly on ontological annotations in the metadata. Thus, thorough annotation and following the conventions are important for frictionless data processing. A) technology and technology_type (oem-key 6.1-2) B) for MiMo technologies the input and output energy vectors (oem-key 15.6.1.5.1-2) C) parameter names (oem-key 15.6.1.6.1-3) A) technology and technology_type \u00b6 The technology and technology_type columns from the oedatamodel-concrete are filled with the information from the subject key. B) input and output energy vectors for MiMo technologies \u00b6 Moved to Input and output energy vectors . C) parameter names \u00b6 Case1 \u00b6 In cases where there is a single suitable ontology concept in the OEO we'll use the keys isAbout , valueReference as explained above. Case2 \u00b6 In cases where there are multiple ontology concepts in the OEO that are suitable by using them in composition we'll use them as list in the name key. For example: thermal efficiency of a heat power plant (as column in a tabular data set) The concept thermal efficiency is not (yet, as of 23.09.22) available in the OEO, but the concepts: 'heat generation process' http://openenergy-platform.org/ontology/oeo/oeo-physical/OEO_00010248 'energy conversion efficiency' http://openenergy-platform.org/ontology/oeo/OEO_00140049 { \"resources\" : [ { \"profile\" : null , \"name\" : null , \"path\" : null , \"format\" : null , \"encoding\" : null , \"schema\" : { \"fields\" : [ { \"name\" : \"thermal efficiency\" , \"description\" : \"The column holds the values of the thermal efficiency of a heat power plant\" , \"type\" : null , \"unit\" : null , \"isAbout\" : [ { \"name\" : \"heat generation process\" , \"path\" : \"http://openenergy-platform.org/ontology/oeo/oeo-physical/OEO_00010248\" }, { \"name\" : \"energy conversion efficiency\" , \"path\" : \"http://openenergy-platform.org/ontology/oeo/OEO_00140049\" } ], \"valueReference\" : [ { \"value\" : null , \"name\" : null , \"path\" : null } ] } ] } } ] } Case3 \u00b6 In cases where there is NO suitable ontology concept in the OEO we'll copy the term used in the data directly to the name key for further data processing in SEDOS. Note This is SEDOS-specific and needed for data processing. Normally one would leave the annotation in isAbout empty. For example: fantasy power plant parameter { \"resources\" : [ { \"profile\" : null , \"name\" : null , \"path\" : null , \"format\" : null , \"encoding\" : null , \"schema\" : { \"fields\" : [ { \"name\" : \"fantasy power plant paramter\" , \"description\" : \"The column holds values of a parameter, whose concept is not yet available in the OEO, of a fantasy power plant \" , \"type\" : null , \"unit\" : null , \"isAbout\" : [ { \"name\" : \"fantasy power plant parameter\" , \"path\" : null } ], \"valueReference\" : [ { \"value\" : null , \"name\" : null , \"path\" : null } ] } ] } } ] }","title":"Ontology"},{"location":"data_requirements/ontology/#ontological#annotation#of#data","text":"","title":"Ontological annotation of data"},{"location":"data_requirements/ontology/#basic#annotation#knowledge#with#oem","text":"Ontological annotation of data means that data is linked to ontological concepts in the metadata. In SEDOS we use the oemetadata v.1.5.1 (OEM) as metadata standard. For more context about the OEM-keys in oemetadata v.1.5.1, see here . In energy systems modelling, data is fed into a model via parameters and their associated values. In the following, when we speak about ontological annotation, we, therefore, speak of parameter names, which are linked to an ontological concept for definition. The linkage of parameter name and ontological concept in OEM has three elements: user-defined parameter name human-readable ontological concept name Internationalized Resource Identifier (IRI) Below the general section of the oemetadata v1.5.1 is shown, relevant for the ontological annotation of the table content itself . The general content of the table is annotated in the subject key { \"name\" : null , \"title\" : null , \"id\" : null , \"description\" : null , \"language\" : [ null ], \"subject\" : [ { \"name\" : null , \"path\" : null } ], \"keywords\" : [ null ], \"publicationDate\" : null } Below the resource section of the oemetadata v1.5.1 is shown, relevant for ontological annotation of parameter names .","title":"Basic annotation knowledge with OEM"},{"location":"data_requirements/ontology/#link#a#parameter#name#to#a#suitable#ontology#concept","text":"","title":"Link a parameter name to a suitable ontology concept"},{"location":"data_requirements/ontology/#background#know-how","text":"Parameters can occur in the column header or as column value when dealing with tabular data. A) Parameters in the column headers are annotated in the isAbout key. B) Parameters occurring within a column are annotated in the valueReference key. { \"resources\" : [ { \"profile\" : null , \"name\" : null , \"path\" : null , \"format\" : null , \"encoding\" : null , \"schema\" : { \"fields\" : [ { \"name\" : null , \"description\" : null , \"type\" : null , \"unit\" : null , \"isAbout\" : [ { \"name\" : null , \"path\" : null } ], \"valueReference\" : [ { \"value\" : null , \"name\" : null , \"path\" : null } ] } ] } } ] } A) Parameters in the column headers - using isAbout : user-defined parameter name is put in name (OEM-key 15.6.1.1), a suitable human-readable ontological concept name is put in name (OEM-key 15.6.1.5.1), Internationalized Resource Identifier (IRI) is put in path (OEM-key 15.6.1.5.2) For example: A column with values for the rotor diameter of a wind turbine: id wind_turbine ro_diam 1 type A 50 2 type A 60 3 type A 70 4 type B 80 5 type B 110 { \"resources\" : [ { \"profile\" : null , \"name\" : null , \"path\" : null , \"format\" : null , \"encoding\" : null , \"schema\" : { \"fields\" : [ { \"name\" : \"wind_turbine\" , \"description\" : null , \"type\" : null , \"unit\" : null , \"isAbout\" : [ { \"name\" : \"wind energy converting unit\" , \"path\" : \"http://openenergy-platform.org/ontology/oeo/OEO_00000044\" } ], \"valueReference\" : [ { \"value\" : null , \"name\" : null , \"path\" : null } ] }, { \"name\" : \"ro_diam\" , \"description\" : null , \"type\" : null , \"unit\" : \"meter\" , \"isAbout\" : [ { \"name\" : \"rotor diameter\" , \"path\" : \"http://openenergy-platform.org/ontology/oeo/OEO_00020144\" } ], \"valueReference\" : [ { \"value\" : null , \"name\" : null , \"path\" : null } ] } ] } } ] } B) Parameters within a column - using valueReference and isAbout : valueReference user-defined parameter name is put in value (OEM-key 15.6.1.6.1), a suitable human-readable ontological concept name is put in name (OEM-key 15.6.1.6.2), Internationalized Resource Identifier (IRI) is put in path (OEM-key 15.6.1.6.3) isAbout When annotating using valueReference , don't forget to annotate the column itself in isAbout , as described in A). For example: A column containing various types of fuels: id various_types_of_energy_carriers 1 coal_HCV 2 green_diesel 3 coal_LCV { \"resources\" : [ { \"profile\" : null , \"name\" : null , \"path\" : null , \"format\" : null , \"encoding\" : null , \"schema\" : { \"fields\" : [ { \"name\" : \"various_types_of_energy_carriers\" , \"description\" : null , \"type\" : null , \"unit\" : null , \"isAbout\" : [ { \"name\" : \"portion of matter\" , \"path\" : \"http://openenergy-platform.org/ontology/oeo/OEO_00000331\" } ], \"valueReference\" : [ { \"value\" : \"coal_HCV\" , \"name\" : \"anthracite\" , \"path\" : \"http://openenergy-platform.org/ontology/oeo/OEO_00000058\" }, { \"value\" : \"green_diesel\" , \"name\" : \"biodiesel\" , \"path\" : \"http://openenergy-platform.org/ontology/oeo/OEO_00000071\" }, { \"value\" : \"coal_LCV\" , \"name\" : \"lignite\" , \"path\" : \"http://openenergy-platform.org/ontology/oeo/OEO_00000251\" } ] } ] } } ] }","title":"Background know-how"},{"location":"data_requirements/ontology/#with#oemetadata#builder","text":"","title":"With oemetadata builder"},{"location":"data_requirements/ontology/#annotation#conventions#for#automatic#data#processing","text":"In SEDOS, automatic data reasoning and processing are based mainly on ontological annotations in the metadata. Thus, thorough annotation and following the conventions are important for frictionless data processing. A) technology and technology_type (oem-key 6.1-2) B) for MiMo technologies the input and output energy vectors (oem-key 15.6.1.5.1-2) C) parameter names (oem-key 15.6.1.6.1-3)","title":"Annotation conventions for automatic data processing"},{"location":"data_requirements/ontology/#a#technology#and#technology_type","text":"The technology and technology_type columns from the oedatamodel-concrete are filled with the information from the subject key.","title":"A) technology and technology_type"},{"location":"data_requirements/ontology/#b#input#and#output#energy#vectors#for#mimo#technologies","text":"Moved to Input and output energy vectors .","title":"B) input and output energy vectors for MiMo technologies"},{"location":"data_requirements/ontology/#c#parameter#names","text":"","title":"C) parameter names"},{"location":"data_requirements/ontology/#case1","text":"In cases where there is a single suitable ontology concept in the OEO we'll use the keys isAbout , valueReference as explained above.","title":"Case1"},{"location":"data_requirements/ontology/#case2","text":"In cases where there are multiple ontology concepts in the OEO that are suitable by using them in composition we'll use them as list in the name key. For example: thermal efficiency of a heat power plant (as column in a tabular data set) The concept thermal efficiency is not (yet, as of 23.09.22) available in the OEO, but the concepts: 'heat generation process' http://openenergy-platform.org/ontology/oeo/oeo-physical/OEO_00010248 'energy conversion efficiency' http://openenergy-platform.org/ontology/oeo/OEO_00140049 { \"resources\" : [ { \"profile\" : null , \"name\" : null , \"path\" : null , \"format\" : null , \"encoding\" : null , \"schema\" : { \"fields\" : [ { \"name\" : \"thermal efficiency\" , \"description\" : \"The column holds the values of the thermal efficiency of a heat power plant\" , \"type\" : null , \"unit\" : null , \"isAbout\" : [ { \"name\" : \"heat generation process\" , \"path\" : \"http://openenergy-platform.org/ontology/oeo/oeo-physical/OEO_00010248\" }, { \"name\" : \"energy conversion efficiency\" , \"path\" : \"http://openenergy-platform.org/ontology/oeo/OEO_00140049\" } ], \"valueReference\" : [ { \"value\" : null , \"name\" : null , \"path\" : null } ] } ] } } ] }","title":"Case2"},{"location":"data_requirements/ontology/#case3","text":"In cases where there is NO suitable ontology concept in the OEO we'll copy the term used in the data directly to the name key for further data processing in SEDOS. Note This is SEDOS-specific and needed for data processing. Normally one would leave the annotation in isAbout empty. For example: fantasy power plant parameter { \"resources\" : [ { \"profile\" : null , \"name\" : null , \"path\" : null , \"format\" : null , \"encoding\" : null , \"schema\" : { \"fields\" : [ { \"name\" : \"fantasy power plant paramter\" , \"description\" : \"The column holds values of a parameter, whose concept is not yet available in the OEO, of a fantasy power plant \" , \"type\" : null , \"unit\" : null , \"isAbout\" : [ { \"name\" : \"fantasy power plant parameter\" , \"path\" : null } ], \"valueReference\" : [ { \"value\" : null , \"name\" : null , \"path\" : null } ] } ] } } ] }","title":"Case3"},{"location":"data_requirements/overview/","text":"Overview of the SEDOS data architecture \u00b6 This section provides an introductory overview of SEDOS' data architecture and its elements, which you will find explained more detailed in further parts of the documentation. In the SEDOS project data is collected, preprocessed and published by work packages (WPs) 4 to 8. Therefore, partners working in WPs 4-8 create multiple input data datapackages and upload them to the OEP via the OEDatamodel-API. By applying the described data architecture, we follow the frictionless data conventions. Everytime new data is uploaded to the OEP, the partners also have to register the new data version on the databus via the OEDatamodel-API. By this process, the latest versions from all WPs are available on the databus in order to be further processed by the SEDOS pipeline. Input datapackages generated and published by WP 4-8 will be automatically checked for updates and processed to one datapackage holding all input data by the SEDOS Data Pipeline. This input datapackage will also be published on the OEP. The partners in WP9 will then download the input datapackage from the OEP and use it to set up, parameterize and solve their energy system model. The modelling results will be postprocessed and uploaded to the OEP by the partners of WP9. A generalized representation of a datapackage is shown in the figure below. A datapackage consists of: data - containing parameters and values for modelling, and metadata - describing the structure of the datamodel, and providing context to the data.","title":"Overview"},{"location":"data_requirements/overview/#overview#of#the#sedos#data#architecture","text":"This section provides an introductory overview of SEDOS' data architecture and its elements, which you will find explained more detailed in further parts of the documentation. In the SEDOS project data is collected, preprocessed and published by work packages (WPs) 4 to 8. Therefore, partners working in WPs 4-8 create multiple input data datapackages and upload them to the OEP via the OEDatamodel-API. By applying the described data architecture, we follow the frictionless data conventions. Everytime new data is uploaded to the OEP, the partners also have to register the new data version on the databus via the OEDatamodel-API. By this process, the latest versions from all WPs are available on the databus in order to be further processed by the SEDOS pipeline. Input datapackages generated and published by WP 4-8 will be automatically checked for updates and processed to one datapackage holding all input data by the SEDOS Data Pipeline. This input datapackage will also be published on the OEP. The partners in WP9 will then download the input datapackage from the OEP and use it to set up, parameterize and solve their energy system model. The modelling results will be postprocessed and uploaded to the OEP by the partners of WP9. A generalized representation of a datapackage is shown in the figure below. A datapackage consists of: data - containing parameters and values for modelling, and metadata - describing the structure of the datamodel, and providing context to the data.","title":"Overview of the SEDOS data architecture"}]}